worker_processes  auto;
error_log /var/log/openresty/error.log;
events {
    worker_connections 1024;
}
# Lua Lib
http {
	lua_package_path "/opt/dmj/lib/lua-resty-rate-limit/lib/?.lua;;";
	upstream api {
	    server localhost:8080;
	}

	map $remote_addr $name_lim {
		192.168.0.1	1;
		192.168.0.2	2;
		default		0;
	}
	
	server {
	    listen 80;
	    #server_name api.dev;
	
	    access_log  /var/log/openresty/api_access.log;
	    error_log   /var/log/openresty/api_error.log;

	
	    location / {
                # r_i = {{"Name_from_map1", "rate1", "interval1"}, {"Name_from_map2", "rate2", "interval2"}}
                access_by_lua '
                    local request = require "resty.rate.limit"
                    request.limit { key = ngx.var.name_lim,
                                    rateTotal = 50,
                                    intervalTotal = 1,
                                    r_i = {{"Total", 50, 1, false}, {"1", 20, 1, false}, {"2", 30, 1, true}},
                                    log_level = ngx.ERR,
                                    redis_config = { host = "192.168.0.1", port = 6379, timeout = 1, pool_size = 100 }	}
                ';
	
	        proxy_set_header  Host               $host;
	        proxy_set_header  X-Server-Scheme    $scheme;
	        proxy_set_header  X-Real-IP          $remote_addr;
	        proxy_set_header  X-Forwarded-For    $remote_addr;
	        #proxy_set_header  X-Forwarded-Proto  $x_forwarded_proto;
	
	        proxy_connect_timeout  1s;
	        proxy_read_timeout     30s;
	
	        proxy_pass   http://api;
	    }
	}
	server {
	    listen 8080;
	    location / {
	        default_type text/html;
	        content_by_lua '
	            ngx.say("<p>hello, world</p>")
	        ';
	    }
	}
}
