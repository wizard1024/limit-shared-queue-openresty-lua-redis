worker_processes  auto;
worker_rlimit_nofile 16384;
user nginx;
error_log /var/log/nginx/or-error.log notice;
events {
    worker_connections 4096;
}
# Lua Lib
http {
	log_format  main_post  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$request_body" "$request_time" "$upstream_response_time" "$upstream_addr" "$msec" "$name_lim"';

	lua_package_path "/opt/dmj/lib/lua-resty-rate-limit/lib/?.lua;;";

#	map $remote_addr $name_lim {
#		133.242.201.88	1;
#		133.242.201.89	2;
#		133.242.201.90	3;
#		133.242.201.91	4;
#		133.242.84.191	5;
#		default		0;
#	}
	
	map $http_x_backend $name_lim {
		"CON"	1;
		"OPE"	2;
		"XYZ"	3;
		"VET"	4;
		"IFM"	5;
		default 0;
	}
	
	map $http_upgrade $connection_upgrade {
	        default upgrade;
	        ''      '';
	}
	upstream tomcat-download-market-test.jp {
		ip_hash;
		server 10.0.1.10:9090;
		server 10.0.1.11:7070;
	}
	upstream rr-tomcat-download-market-test.jp {
		server 10.0.1.10:9090;
		server 10.0.1.11:7070;
	}
	upstream node1-tomcat-download-market-test.jp {
		server 10.0.1.10:9090;
	}
	upstream node2-tomcat-download-market-test.jp {
		server 10.0.1.11:7070;
	}
	upstream tomcat-download-market-test.jp-socket {
		server 10.0.1.10:9090;
		server 10.0.1.11:7070 backup;
	}
	
	server {
	    listen 80 default_server;
	    server_name www.download-market-test.jp;
	    port_in_redirect on;
	    #access_log /var/log/nginx/download-market-test.jp_access.log main_post;
	    error_log /var/log/nginx/download-market-test.jp_error.log;
	    access_log off;
	
		set_real_ip_from 10.0.0.57;
		
	    location / {
                # r_i = {{"Name_from_map1", "rate1", "interval1"}, {"Name_from_map2", "rate2", "interval2"}}
		# CON1 - 133.242.201.88 1
		# OPE - 133.242.201.89 2
		# XYZ - 133.242.201.90 3
		# VET - 133.242.201.91 4
		# IFM - 133.242.84.191 5

                access_by_lua '
                    local request = require "resty.rate.limit"
                    request.limit { key = ngx.var.name_lim,
                                    rateTotal = 200,
                                    intervalTotal = 1,
                                    r_i = {
					{"0", 10, 1, false}, 
					{"1", 40, 1, true}, 
					{"2", 40, 1, true}, 
					{"3", 40, 1, true}, 
					{"4", 40, 1, false}, 
					{"5", 40, 1, false}
					},
                                    log_level = ngx.ERR,
                                    redis_config = { host = "127.0.0.1", port = 6379, timeout = 1, pool_size = 100 }	}
                ';
	                proxy_pass          http://127.0.0.1:3081;
	                #proxy_set_header    Host            $host;
	                proxy_set_header    Host            "www.download-market-test.jp";
	                proxy_set_header    X-Real-IP       $remote_addr;
	                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	                #proxy_redirect    https://$host/ https://$host:$server_port/;
	                #proxy_set_header X-Forwarded-Proto https;
	                proxy_connect_timeout 10;
			proxy_read_timeout 300;
			proxy_send_timeout 300;
	                client_max_body_size        40m;
			proxy_redirect    http://www.download-market-test.jp/ http://54.95.98.94/;
	    }
	}
	# Transparent proxy
	server {
	    listen 127.0.0.1:3081;
	    server_name www.download-market-test.jp;
	    #access_log /var/log/nginx/transparent-download-market-test.jp_access.log main_post;
	    #error_log /var/log/nginx/transparent-download-market-test.jp_error.log;
	    access_log off;
	
	        #Main Backend
	    location / {
		return 200 "Done";
		#proxy_pass 	    http://rr-tomcat-download-market-test.jp;
	        #proxy_set_header Host $http_host;
	        #client_max_body_size 40M;
	        #proxy_connect_timeout 10;
		#proxy_read_timeout 300;
		#proxy_send_timeout 300;
	    }
	
	}
	# Test.local for keepalived
	server {
		listen 127.0.1.1:80;
		server_name test.local;

		access_log off;
		location / {
			return 200 "OK";
		}
	}
}	
